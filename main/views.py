from django.shortcuts import render, HttpResponse, redirect, get_object_or_404

from .models import Student, Course

from django.db.models.query import QuerySet
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView

from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin

from .forms import *

from django.contrib.auth import logout, login
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.views import LoginView

from typing import Any

from django.urls import reverse_lazy

from django.views.decorators.cache import cache_page

# Create your views here.

menu =  [
    {'menu1':"url1"},
    {'menu2':"url2"},
]

def index(r):
    # return HttpResponse("<h1>–ê–∫–∞–¥–µ–º–∏—è –´</h1>")
    return render(r, 'base.html')

# @cache_page(60*15)
def students(r):
    students = Student.objects.all()
    return render(r, 'students.html', context={'students':students})


# –Ω–∞ —É—Ä–æ–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞ —Ç.–∫. —è –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω üòÇ
@login_required(login_url='/login/')
def student(r, id):
    student = Student.objects.get(id=id)    
    return render(r, 'student.html', context={'student':student})


# —Å–ø–∏—Å–æ–∫
class StudentsView(ListView):
    model = Student
    template_name = 'students.html'
    context_object_name = 'students'
    
    # –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω–µ—Ç def get
    # def get_queryset(self) -> QuerySet[Any]:
    #     return Student.objects.filter(name='–í–∞—Å—è')
    
    # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ—Ç def get
    # def get_context_data(self, **kwargs) -> dict[str, Any]:
    #     context =  super().get_context_data(**kwargs)
    #     context['menu'] = menu
    #     return context
    
    # ---------------------------------------
    # http://127.0.0.1:8000/students2/?f=–∞—Å—è
    def get(self, r, *args, **kwargs):
        f = r.GET.get('f', default='')
        # print(f)
        students = Student.objects.filter(name__contains=f).all()
        return render(r, self.template_name, context={'students':students, 'menu':menu})
    
# –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç
class StudentView(DetailView):
    model = Student
    template_name = 'student.html'          
    slug_url_kwarg = 'name_slug'
    context_object_name = 'student'
    # pk_url_kwarg = 'pk' # —Ç.–∫. —Ç—É—Ç slug —Å—Å—ã–ª–∫–∞ –ø–æ id —É–∂–µ –Ω–µ –Ω—É–∂–Ω–∞
    login_url = '/login/'    


# –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
# LoginRequiredMixin - –Ω–∞ —É—Ä–æ–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞ —Ç.–∫. —è –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω  üòÇ
class StudentAddView(LoginRequiredMixin, CreateView): # login –¥–± –ø–µ—Ä–≤—ã–π
    form_class = StudentAddForm
    # template_name = 'student_add_form.html'
    template_name = 'student_add_form_manual.html' # —Ç—É—Ç —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
    success_url = reverse_lazy('students')
    login_url = '/login/'

# –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
class StudentEditView(UpdateView):
    model = Student
    fields = '__all__'
    template_name = 'student_edit_form.html'
    pk_url_kwarg = 'id'
    # –ï—Å–ª–∏ form_class –Ω–µ —É–∫–∞–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Ñ–æ—Ä–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ  –º–æ–¥–µ–ª–∏
    
# # –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
@login_required(login_url='/login/')
def student_edit_view(r, id):    
    student = get_object_or_404(Student, id=id)    
    if r.method=='GET':        
        return render(
                    request=r, 
                    template_name='student_edit_form.html', 
                    context={'form':StudentAddForm(instance=student), 'id':id})
    # POST
    form = StudentAddForm(r.POST, instance=student)
    if form.is_valid(): 
        print(form.cleaned_data)
        form.save()
        return redirect('students')   
    form.add_error(None, "–û—à–∏–±–∫–∞....")
    return render(r, 'student_edit_form.html', {'form':form})     



# ----------------------- COURSES
class Courses(ListView):
    model = Course
    template_name = 'courses.html'
    context_object_name = 'courses' 

class Show_course(DetailView):
    model = Course
    template_name = 'course.html'
    pk_url_kwarg = 'id'
    
class CourseEditView(UpdateView):
    model = Course
    fields = '__all__'    
    template_name = 'course_add_form.html'
    pk_url_kwarg = 'id'
    
    # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å success_url –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ Course.get_absolute_url()
    # success_url = reverse_lazy('courses')
    
class CourseDeleteView(DeleteView):
    model = Course      
    template_name = 'course_del_confirm.html'    
    success_url = reverse_lazy('courses')

def course_add_view(r):
    if r.method == "POST":
        form = CourseAddForm2(r.POST)
        if form.is_valid():
            form.save()
            return redirect("courses")
        
        
            # try:
            #     Course.objects.create(**form.cleaned_data)
            # except Exception as e:
            #     form.add_error(None, "–û—à–∏–±–∫–∞ ....")
    
    else:
        form = CourseAddForm2()
    return render(r, 'course_add_form.html', context={'form':form})


#-----------------------

class LoginUser(LoginView):
    form_class = AuthenticationForm 
    template_name = 'login.html'
    
    def get_success_url(self) -> str:
        return reverse_lazy('index')

class RegisterUser(CreateView):
    # form_class = UserCreationForm # –¥–∂–∞–Ω–≥–æ–≤—Å–∫–∞—è —Ñ–æ—Ä–º–º–∞
    form_class = RegisterUserForm
    
    template_name = 'reg.html'
    # success_url = reverse_lazy('login') # –¥–ª—è –≤—Ö–æ–¥–∞ —Å–∞–π—Ç–∞
    
    def form_valid(self, form):
        user = form.save()
        login(self.request, user)
        return redirect('index')

        
def login(r):
    return HttpResponse("<h1> –õ–û–ì–ò–ù </h1>")

def logout_user(r):
    logout(r)
    return redirect('index')